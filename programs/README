Security assignment:
	The server was coded on a Linux (Ubuntu) system and compiled using gcc. The
	given makefile can be used to compile the program. Particularly, type:
		make [ftpserver]
	Since the last assignment, the ftpserver , has now been modified so that it
	must now be run as:
		ftpserver port
	because the logfile is now specified in the configuration file.

	A few notes on the configuration file:
		-It should be located in the current directory with the name ".ftpdlog"
		-It follows the specification given in the assignment, i.e.:
			*Lines beginning with '#' are comments
			*The parameters "logdirectory," "numlogfiles," "usernamefile,"
				"port_mode," and "pasv_mode" are supported
		-The default directory for log files is under the current directory in
			the directory "log"
		-Log files are restricted to 1000 or less (i.e., 000-999, before they
			wrap back around to 000)
		-An additional parameter has been added to the configuration file,
			namely, "nextlognum"
			*This parameter keeps track of the next log file number to be used
			*It is re-written by the server program every time it successfully
				opens a log file, wrapping around to 000 after it hits 999
			*This can be modified manually, but it likely should not be. If it
				is, the format is a three-digit number in the range [000, 999]
		-The "numlogfiles" parameter is handled by simply deleting the file that
			is the current number minus numlogfiles
			*For example, if the current number is 5 and the numlogfiles
				parameter is 5, then logfile.000 is deleted
			*This works using modular arithmetic so, for example, if current
				number is 0 and number to keep is 5, then 995 is deleted

	The samples directory contains examples of the port_mode and pasv_mode
	being set in different comibnations. Each file contains an example of one
	user (the client for this assignment) connecting, doing an "ls" command
	with PORT then an "ls" command with PASV; this user then disconnects, and
	another user (the released FTP client) connects and does the same.  The
	files are samples/pasv_off, samples/port_off, and samples/both_on. (One
	thing to note here is that 502 status code ("not implemented") is not an
	accetable response from PORT, according to RFC 959, so instead, 500
	("command not recognized") is used instead when port_mode is set to "NO".)

	Also note that most of the functionality for this assignment is contained
	in the file src/server.c (with definitions in its corresponding
	include/server.h file), though a "open_log_file_in_dir" function was added
	to src/log.c


Server:
	To compile the program, use:
		make [ftpserver]
	The individual source files, all held in src/, can also be compiled
	customly.

	Currently, the server handles all but the PASV, EPSV and EPRT commands correctly,
	handling all expected and all error conditions correctly. Two sample runs
	can be found in the samples/ folder: server_myclient, run with my FTP client
	for this course, and server_prodclient, run with the standard Linux FTP
	client.

	A quick note on "maintaining state" in the program: this is done using the
	logged_in, account, and data_sock variables on the session structure. The
	logged_in value, obviously, keeps track of whether the client has logged in
	yet, which prevents users from executing commands that require authentication.
	The account pointer is used to keep track of whether the user has submitted
	a (successful) USER command - if he has, then it is set to something, but
	otherwise, it is null. Finally, for the data_sock, if a PORT or PASV has
	been exedcuted, then the data_sock will be >= 0, obviously, but otherwise,
	it is set to -1, as a flag, to ensure that, for example, LIST and RETR commands
	cannot be executed without a preceding establishment of the data socket.

	Here is a quick description of the source files included:
		ftpserver.c - the actual code for the FTP server
		ftp.c - network functions common to both the FTP server and the FTP client
		log.c - the functionality needed for logging
		status_t.c - functions for dealign with errors; error codes are defined in
			include/status_t.h
		string_t.c - a personal C library for strings

Client:
	To compile the program, use:
		make [ftpclient]
	where the ftpclient is not neccessary. Alternatively, compile the
	individual source files in src/ with gcc with your custom flags.
	To run the program, use ./ftpclient server logfile [port], where server is the
	server to which to connect, the log file is the file in which log reports will
	be written, and port is optional and tells the client to which port to try to
	connect.

	Here is a list of the available commands and their formats, where [] parts are
	optional and all else is required.
		-cd directory - sends CWD directory to server
		-cdup - sends CDUP to server
		-ls [file or directory name] - sends LIST or LIST of file/dir name
		-get server_file [local file]
		-pwd - sends PWD to server
		-help [help list] - sends HELP to the server
		-quit - sends QUIT to the server and shuts the program down
		-passive - toggles the "passive" flag, i.e., whether to use PASV (in passive
			mode) or PORT (in non-passive/active mode) Upon logging in, defaults to PORT first
		-extended - "extended" flag; if true, forces the use of IPv6 for EPSV and
			EPRT. Defaults first to false and then to either true or false depending
			on whether the client program could find any IPv4 or IPv6 addresses

	Note that the "extended" mode does not exactly work, however. When in active
	mode, the client will make an "EPRT" request to the server, which occasionally
	gets a positive response, but the server will never connect to the client. For
	the time being, additionally, extended mode has not been implemented in passive
	mode. The client will use "PASV" no matter the value of the "extended" flag.

	A sample run can be found in the samples/sample_log, for all commands, with
	variations on all of them, including failures and successes. Also, at the
	bottom, an example of an EPRT command can be found. On occasion, this command
	would get a "successful" response, but then a connection would never be made,
	but on this occassion, a response was never received.

	Also, I know gotos have a bad reputation, but I wanted to experiment with a new,
	common-in-C error-handling paradigm for this assignment, and they seem to have
	worked fairly well.
